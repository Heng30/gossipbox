import { Button, TextEdit } from "std-widgets.slint";
import { Theme } from "../theme.slint";
import { Store } from "../store.slint";
import { Logic } from "../logic.slint";
import { IconBtn } from "../base/icon-btn.slint";
import { Divider } from "../base/divider.slint";
import { Btn } from "../base/btn.slint";

export component Footer inherits Rectangle {
    height: Math.min(Math.max(te.preferred-height + vbox.padding + root.btn-height, Theme.question-box-height), Theme.question-box-height *  4);
    in-out property<length> btn-height: Theme.bottom-btn-height;
    in-out property question <=> te.text;

    forward-focus: te;
    property <bool> is-ctrl-pressed;

    callback scroll-to-top();
    callback scroll-to-bottom();
    callback scroll-up();
    callback scroll-down();

    fscope := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = true;
            }

            if (is-ctrl-pressed) {
                if (event.text == Key.Return) {
                    Logic.send-text(root.question);
                    root.question = "";
                    vbox.ensure-show-cursor();
                } else if (event.text == "t") {
                    root.scroll-to-top();
                } else if (event.text == "b") {
                    root.scroll-to-bottom();
                } else if (event.text == "k") {
                    root.scroll-up();
                } else if (event.text == "j") {
                    root.scroll-down();
                } else if (event.text == "m") {
                    Logic.retry-send-text();
                } else if (event.text == "g") {
                    Logic.reset-current-session_chats();
                }
            }

            reject
        }
        key-released(event) => {
            if (event.text == Key.Control) {
                is-ctrl-pressed = false;
            }

            reject
        }

        vbox := VerticalLayout {
            padding: Theme.scroll-width;
            padding-top: 0px;
            padding-bottom: Theme.padding;

            function ensure-show-cursor() {
                if (flick.viewport-height <= flick.height) {
                    flick.viewport-y = 0;
                } else {
                    if (-flick.viewport-y + Theme.default-font-size * 2 < flick.viewport-height - flick.height) {

                        return;
                    }
                    flick.viewport-y = -flick.viewport-height + flick.height;
                }
            }

            Rectangle {
                background: @linear-gradient(180deg, Theme.dark-fill-color 0%, Theme.base-background 100%);
                border-radius: Theme.border-radius / 2;

                flick := Flickable {
                    x: 0px; y: 0px;
                    height: root.height - root.btn-height;

                    VerticalLayout {
                        padding: Theme.padding;
                        te := TextInput {
                            single-line: false;
                            wrap: word-wrap;
                            color: Theme.regular-text-color;

                            edited => {
                                vbox.ensure-show-cursor();
                            }
                        }
                    }
                }

                Text {
                    x: Theme.padding;
                    y: Theme.padding;
                    visible: te.text == "";
                    text: "Ctrl+Enter";
                    color: Theme.placeholder-text-color;
                }
            }
        }

        Rectangle {
            x: vbox.padding;
            y: root.height - root.btn-height - Theme.padding * 2;
            height: root.btn-height;
            width: root.width - vbox.padding * 2;

            TouchArea {
                clicked => {
                    root.focus();
                }
            }

            IconBtn {
                x: parent.width - (self.width + Theme.padding * 2) * 1;
                icon: @image-url("../images/send.svg");
                hover-color: Theme.hover-color-dark;
                tip-text: Store.translator.tip-send;
                clicked => {
                    if (te.text == "") { return; }

                    Logic.send-text(te.text);
                    te.text = "";
                    vbox.ensure-show-cursor();
                }
            }

            IconBtn {
                x: parent.width - (self.width + Theme.padding * 2) * 2;
                icon: @image-url("../images/image.svg");
                hover-color: Theme.hover-color-dark;
                tip-text: Store.translator.tip-send-image;
                clicked => {
                    Logic.send-image();
                }
            }

            IconBtn {
                x: parent.width - (self.width + Theme.padding * 2) * 3;
                icon: @image-url("../images/format-clear.svg");
                hover-color: Theme.hover-color-dark;
                tip-text: Store.translator.tip-clear;
                clicked => {
                    te.text = "";
                }
            }

            IconBtn {
                x: parent.width - (self.width + Theme.padding * 2) * 4;
                icon: @image-url("../images/reset.svg");
                hover-color: Theme.hover-color-dark;
                icon-width: Theme.icon-size * 0.7;
                tip-text: Store.translator.tip-reset;
                clicked => {
                    Store.ok-cancel-dialog-setting.title-type = "warning";
                    Store.ok-cancel-dialog-setting.title-text = Store.translator.warning;
                    Store.ok-cancel-dialog-setting.body-text = Store.translator.reset-or-not;
                    Store.ok-cancel-dialog-setting.handle-type = "session-reset";
                    Store.ok-cancel-dialog-setting.handle-uuid = "";
                }
            }
        }
    }

    Divider {
        x: vbox.padding;
        y: vbox.height - vbox.padding-bottom - self.height;
        height: 2px;
        width: root.width - vbox.padding * 2;
        border-radius: self.height / 2;
        background: te.has-focus ? Theme.brand-border-color : Theme.dark-fill-color.darker(30%);
    }
}


import { Theme } from "../theme.slint";
import { Store } from "../store.slint";
import { Logic } from "../logic.slint";
import { IconBtn } from "../base/icon-btn.slint";
import { IconBtn } from "../base/icon-btn.slint";
import { Brand } from "../base/brand.slint";
import { CenterLayout } from "../base/center-layout.slint";

export component Body inherits Rectangle {
    private property<length> item-height: Theme.default-font-size + Theme.padding * 6;

    pure function get-status(status: string) -> string {
        if (status == "online") {
            return Store.translator.online;
        } else if (status == "offline") {
            return Store.translator.offline;
        }

        return status;
    }

    pure function get-status-color(status: string) -> color {
        if (status == "online") {
            return Theme.success-color;
        } else if (status == "offline") {
            return Theme.warning-color;
        }

        return Theme.brand-color;
    }

    VerticalLayout {
        alignment: end;
        CenterLayout {
            Brand {
                width: root.width * 0.5;
                opacity: 0.05;
            }
        }
    }

    Flickable {
        viewport-height: Store.chat-sessions.length * root.item-height;

        for data[index] in Store.chat-sessions : VerticalLayout {
            y: index * item-height;
            height: root.item-height;

            Rectangle {
                background: data.uuid == Store.current-session-uuid ? Theme.base-background : (touch.has-hover ? Theme.darker-fill-color : Colors.transparent);

                touch := TouchArea {
                    mouse-cursor: self.has-hover ? pointer : default;
                    clicked => {
                        Logic.switch-session(Store.current-session-uuid, data.uuid);
                    }
                }

                HorizontalLayout {
                    alignment: space-between;
                    padding-left: Theme.padding * 2;
                    padding-right: Theme.padding * 2;

                    HorizontalLayout {
                        if (data.uuid == Store.current-session-uuid) : VerticalLayout {
                            alignment: center;
                            height: root.item-height;
                            padding-right: Theme.padding * 2;

                            Rectangle {
                                width: 4px;
                                height: 80%;
                                border-radius: 2px;
                                background: Theme.brand-color;
                            }
                        }

                        name-txt := Text {
                            color: data.uuid == Store.current-session-uuid ? Theme.brand-color : Theme.regular-text-color;
                            text: data.name;
                            font-size: Theme.enlarge-font-size;
                            overflow: elide;
                            vertical-alignment: center;
                        }
                    }

                    status-txt := Text {
                        vertical-alignment: center;
                        color: root.get-status-color(data.status);
                        text: data.unread-count + "    " + root.get-status(data.status);
                        font-size: name-txt.font-size - 4px;
                    }
                }
            }
        }
    }
}
